library(geepack)
library(glmtoolbox)
data.comp.lag <-
data.comp %>%
group_by(subject_id) %>%
mutate(mem_comp_lag = lag(mem_comp), observed_lag = lag(observed)) %>%
ungroup() %>%
filter(observed_lag != 0) %>%
mutate(drop = ifelse(observed == 0 & observed_lag == 1, 1, 0)) %>%
select(subject_id, day, day_fct, age, gender, treatment_group, mem_comp_lag, drop)
model.complete.1 <- glmgee(mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = subject_id, corstr = "Independence")
model.complete.2 <- glmgee(mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = subject_id,  corstr = "AR-M-dependent(1)")
model.complete.3 <- glmgee(mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = subject_id, corstr = "Exchangeable")
coef(model.complete.1)
library(gtsummary)
tbl_regression(model.complete.1)
library(gee)
library(geepack)
library(glmtoolbox)
library(gtsummary)
data.comp.lag <-
data.comp %>%
group_by(subject_id) %>%
mutate(mem_comp_lag = lag(mem_comp), observed_lag = lag(observed)) %>%
ungroup() %>%
filter(observed_lag != 0) %>%
mutate(drop = ifelse(observed == 0 & observed_lag == 1, 1, 0)) %>%
select(subject_id, day, day_fct, age, gender, treatment_group, mem_comp_lag, drop)
model.complete.1 <- geeglm(mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = subject_id, corstr = "independence")
model.complete.2 <- geeglm(mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = subject_id,  corstr = "ar1")
model.complete.3 <- geeglm(mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = subject_id, corstr = "exchangeable")
tbl_regression(model.complete.1)
library(gee)
library(geepack)
library(glmtoolbox)
library(gtsummary)
data.comp.lag <-
data.comp %>%
group_by(subject_id) %>%
mutate(mem_comp_lag = lag(mem_comp), observed_lag = lag(observed)) %>%
ungroup() %>%
filter(observed_lag != 0) %>%
mutate(drop = ifelse(observed == 0 & observed_lag == 1, 1, 0)) %>%
select(subject_id, day, day_fct, age, gender, treatment_group, mem_comp_lag, drop)
model.complete.1 <- geeglm(mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = subject_id, corstr = "independence")
model.complete.2 <- geeglm(mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = subject_id,  corstr = "ar1")
model.complete.3 <- geeglm(mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = subject_id, corstr = "exchangeable")
tbl_regression(model.complete.1)
tbl_regression(model.complete.2)
tbl_regression(model.complete.3)
tbl_merge(
list(tbl_regression(model.complete.1), tbl_regression(model.complete.2), tbl_regression(model.complete.3))
)
model.drop <-
geeglm(drop ~ day_fct + treatment_group + age + gender + treatment_group * day_fct + mem_comp_lag, data = data.comp, family = binomial, id = subject_id, corstr = "independence")
model.drop <-
geeglm(drop ~ day_fct + treatment_group + age + gender + treatment_group * day_fct + mem_comp_lag, data = data.comp.lag, family = binomial, id = subject_id, corstr = "independence")
data.comp.lag <-
data.comp %>%
group_by(subject_id) %>%
mutate(mem_comp_lag = lag(mem_comp), observed_lag = lag(observed)) %>%
ungroup() %>%
filter(observed_lag != 0) %>%
mutate(drop = ifelse(observed == 0 & observed_lag == 1, 1, 0)) %>%
select(subject_id, day, day_fct, age, gender, treatment_group, mem_comp_lag, drop) %>%
mutate(day_fct = factor(day, levels = c(5,19,90)))
model.drop <-
geeglm(drop ~ day_fct + treatment_group + age + gender + treatment_group * day_fct + mem_comp_lag, data = data.comp.lag, family = binomial, id = subject_id, corstr = "independence")
tbl_regression(model.drop)
tbl_regression(model.drop, exponentiate = T)
tbl_regression(model.drop, exponentiate = F)
model.drop <-
geeglm(drop ~ day_fct + treatment_group + age + gender + mem_comp_lag, data = data.comp.lag, family = binomial, id = subject_id, corstr = "independence")
tbl_regression(model.drop, exponentiate = F)
library(lattice)
library(lme4)
library(nlme)
library(lattice)
library(knitr)
library(kableExtra)
model.lmer = lmer(
em_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct + (1 + day_fct|subject_id), data = data.comp
)
model.lmer = lmer(
mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct + (1 + day_fct|subject_id), data = data.comp
)
model.lmer = lmer(
mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct + (1 |subject_id), data = data.comp
)
tbl_regression(model.lmer)
install.packages(CRTgeeDR)
install.packages("CRTgeeDR")
library(CRTgeeDR)
model.ipwgee <-
geeDREstimation(mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = subject_id, corstr = "independence")
model.ipwgee <-
geeDREstimation(mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = "gaussian", id = "subject_id", corstr = "independence")
model.ipwgee <-
geeDREstimation(formula = mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = "gaussian", id = "subject_id", corstr = "independence")
model.ipwgee <-
geeDREstimation(formula = mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = "gaussian", id = "subject_id", corstr = "independence", nameTRT = "treatment_group")
model.ipwgee <-
geeDREstimation(formula = mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = subject_id, corstr = "independence", nameTRT = "treatment_group")
model.ipwgee <-
geeDREstimation(formula = mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = "subject_id", corstr = "independence", nameTRT = "treatment_group")
model.ipwgee <-
geeDREstimation(formula = mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = "subject_id", corstr = "independence", nameTRT = "treatment_group")
model.ipwgee <-
geeDREstimation(formula = mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = "subject_id", corstr = "independence")
model.ipwgee <-
geeDREstimation(formula = mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = "subject_id", corstr = "independence", nameTRT = "treatment_group")
View(data.surv)
data.surv <-
data.comp %>%
select(subject_id, day_fct, observed, treatment_group, age, gender) %>%
mutate(dropped = 1-observed) %>%
distinct() %>%
select(-observed) %>%
mutate(stop = as.numeric(day_fct)-1) %>%
group_by(subject_id) %>%
mutate(start = lag(stop)) %>%
drop_na(start)
data.surv <-
data.comp %>%
select(subject_id, day_fct, observed, treatment_group, age, gender) %>%
mutate(dropped = 1-observed) %>%
distinct() %>%
dplyr::select(-observed) %>%
mutate(stop = as.numeric(day_fct)-1) %>%
group_by(subject_id) %>%
mutate(start = lag(stop)) %>%
drop_na(start)
data.surv <-
data.comp %>%
dplyr::select(subject_id, day_fct, observed, treatment_group, age, gender) %>%
mutate(dropped = 1-observed) %>%
distinct() %>%
dplyr::select(-observed) %>%
mutate(stop = as.numeric(day_fct)-1) %>%
group_by(subject_id) %>%
mutate(start = lag(stop)) %>%
drop_na(start)
?coxph
knitr::opts_chunk$set(echo = TRUE)
source(knitr::purl("./data_manipulation.Rmd", quiet=TRUE))
source(knitr::purl("./EDA.Rmd", quiet=TRUE))
knitr::opts_chunk$set(echo = TRUE)
source(knitr::purl("./data_manipulation.Rmd", quiet=TRUE))
source(knitr::purl("./EDA.Rmd", quiet=TRUE))
knitr::opts_chunk$set(echo = TRUE)
source(knitr::purl("./data_manipulation.Rmd", quiet=TRUE))
source(knitr::purl("./EDA.Rmd", quiet=TRUE))
source(knitr::purl("./data_manipulation.Rmd", quiet=TRUE))
source(knitr::purl("./EDA.Rmd", quiet=TRUE))
library(gee)
library(geepack)
library(glmtoolbox)
library(gtsummary)
library(tidyverse)
data.comp.lag <-
data.comp %>%
group_by(subject_id) %>%
mutate(mem_comp_lag = lag(mem_comp), observed_lag = lag(observed)) %>%
ungroup() %>%
filter(observed_lag != 0) %>%
mutate(drop = ifelse(observed == 0 & observed_lag == 1, 1, 0)) %>%
select(subject_id, day, day_fct, age, gender, treatment_group, mem_comp_lag, drop) %>%
mutate(day_fct = factor(day, levels = c(5,19,90)))
library(gee)
library(geepack)
library(glmtoolbox)
library(gtsummary)
library(tidyverse)
data.comp.lag <-
data.comp %>%
group_by(subject_id) %>%
mutate(mem_comp_lag = lag(mem_comp), observed_lag = lag(observed)) %>%
ungroup() %>%
filter(observed_lag != 0) %>%
mutate(drop = ifelse(observed == 0 & observed_lag == 1, 1, 0)) %>%
dplyr::select(subject_id, day, day_fct, age, gender, treatment_group, mem_comp_lag, drop) %>%
mutate(day_fct = factor(day, levels = c(5,19,90)))
model.complete.1 <- geeglm(mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = subject_id, corstr = "independence")
model.complete.2 <- geeglm(mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = subject_id,  corstr = "ar1")
model.complete.3 <- geeglm(mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = subject_id, corstr = "exchangeable")
#tbl_regression(model.complete.1)
#tbl_regression(model.complete.2)
#tbl_regression(model.complete.3)
tbl_merge(
list(tbl_regression(model.complete.1), tbl_regression(model.complete.2), tbl_regression(model.complete.3))
)
model.drop <-
geeglm(drop ~ day_fct + treatment_group + age + gender + mem_comp_lag, data = data.comp.lag, family = binomial, id = subject_id, corstr = "independence")
model.drop.coxph <- coxph()
View(data.surv)
model.drop.coxph <- coxph(Surv(start, stop, dropped) ~ day_fct + treatment_group + age + gender)
model.drop.coxph <- coxph(Surv(start, stop, dropped) ~ day_fct + treatment_group + age + gender, data = data.surv)
tbl_regression(model.drop, exponentiate = F)
tbl_regression(model.drop.coxph, exponentiate = F)
model.drop.coxph <- coxph(Surv(start, stop, dropped) ~ treatment_group + age + gender, data = data.surv)
tbl_regression(model.drop, exponentiate = F)
tbl_regression(model.drop, exponentiate = F)
tbl_regression(model.drop.coxph, exponentiate = F)
predict.pdrop <- predict(model.drop, newdata = data.comp)
model.prob.drop <-
geeglm(drop ~ day_fct + treatment_group + age + gender, data = data.surv, family = binomial, id = subject_id, corstr = "independence")
model.prob.drop <-
geeglm(dropped ~ day_fct + treatment_group + age + gender, data = data.surv, family = binomial, id = subject_id, corstr = "independence")
model.prob.drop <-
geeglm(dropped ~ day_fct + treatment_group + age + gender, data = data.surv %>% mutate(day_fct = factor(day_fct,levels = c(5,19,90))), family = binomial, id = subject_id, corstr = "independence")
model.prob.drop.coxph <- coxph(Surv(start, stop, dropped) ~ treatment_group + age + gender, data = data.surv)
tbl_regression(model.prob.drop.coxph, exponentiate = F)
tbl_regression(model.prob.drop, exponentiate = F)
tbl_regression(model.prob.drop.coxph, exponentiate = F)
tbl_merge(
tbl_regression(model.prob.drop, exponentiate = F),tbl_regression(model.prob.drop.coxph, exponentiate = F)
)
tbl_merge(
list(tbl_regression(model.prob.drop, exponentiate = F),tbl_regression(model.prob.drop.coxph, exponentiate = F))
)
predict.pdrop <- predict(model.drop, newdata = data.surv)
predict.pdrop <- predict(model.prob.drop, newdata = data.surv)
predict.prob.drop.coxph <- predict(model.prob.drop, newdata = data.surv)
View(model.prob.drop.coxph)
View(model.prob.drop)
predict.prob.drop <- predict(model.prob.drop, newdata = data.surv)
model.prob.drop <-
geeglm(dropped ~ day_fct + treatment_group + age + gender, data = data.surv %>% mutate(day_fct = factor(day_fct,levels = c(5,19,90))), family = binomial, id = subject_id, corstr = "independence")
model.prob.drop.coxph <- coxph(Surv(start, stop, dropped) ~ treatment_group + age + gender, data = data.surv)
tbl_regression(model.prob.drop, exponentiate = F)
tbl_regression(model.prob.drop.coxph, exponentiate = F)
tbl_merge(
list(tbl_regression(model.prob.drop, exponentiate = F),tbl_regression(model.prob.drop.coxph, exponentiate = F))
)
predict.prob.drop <- predict(model.prob.drop, newdata = data.surv)
predict.prob.drop.coxph <- predict(model.prob.drop, newdata = data.surv)
data.comp$prob.drop <- predict.prob.drop
View(data.comp)
data.surv$prob.drop <- predict.prob.drop
data.surv$prob.drop.coxph <- predict.prob.drop.coxph
predict.prob.drop.coxph <- predict(model.prob.drop.coxph, newdata = data.surv)
data.surv$prob.drop <- predict.prob.drop
data.surv$prob.drop.coxph <- predict.prob.drop.coxph
?predict.coxph
predict.prob.drop.coxph <- predict(model.prob.drop.coxph, newdata = data.surv, type = "survival")
data.surv$prob.drop <- predict.prob.drop
data.surv$prob.drop.coxph <- predict.prob.drop.coxph
?predict.glm
predict.prob.drop <- predict(model.prob.drop, newdata = data.surv, type = "response")
predict.prob.drop.coxph <- predict(model.prob.drop.coxph, newdata = data.surv, type = "survival")
data.surv$prob.drop <- predict.prob.drop
data.surv$prob.drop.coxph <- predict.prob.drop.coxph
data.surv$prob.drop.coxph <- 1-predict.prob.drop.coxph
data.surv$prob.stay <- 1 - predict.prob.drop
data.surv$prob.stay.coxph <- predict.prob.drop.coxph
knitr::opts_chunk$set(echo = TRUE)
source(knitr::purl("./data_manipulation.Rmd", quiet=TRUE))
source(knitr::purl("./EDA.Rmd", quiet=TRUE))
library(gee)
library(geepack)
library(glmtoolbox)
library(gtsummary)
library(tidyverse)
data.comp.lag <-
data.comp %>%
group_by(subject_id) %>%
mutate(mem_comp_lag = lag(mem_comp), observed_lag = lag(observed)) %>%
ungroup() %>%
filter(observed_lag != 0) %>%
mutate(drop = ifelse(observed == 0 & observed_lag == 1, 1, 0)) %>%
dplyr::select(subject_id, day, day_fct, age, gender, treatment_group, mem_comp_lag, drop) %>%
mutate(day_fct = factor(day, levels = c(5,19,90)))
model.complete.1 <- geeglm(mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = subject_id, corstr = "independence")
model.complete.2 <- geeglm(mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = subject_id,  corstr = "ar1")
model.complete.3 <- geeglm(mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = subject_id, corstr = "exchangeable")
#tbl_regression(model.complete.1)
#tbl_regression(model.complete.2)
#tbl_regression(model.complete.3)
tbl_merge(
list(tbl_regression(model.complete.1), tbl_regression(model.complete.2), tbl_regression(model.complete.3))
)
model.drop <-
geeglm(drop ~ day_fct + treatment_group + age + gender + mem_comp_lag, data = data.comp.lag, family = binomial, id = subject_id, corstr = "independence")
tbl_regression(model.drop, exponentiate = F)
library(lme4)
library(nlme)
library(lattice)
library(knitr)
library(kableExtra)
model.lmer = lmer(
mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct + (1 |subject_id), data = data.comp
)
tbl_regression(model.lmer)
# propensity
model.prob.drop <-
geeglm(dropped ~ day_fct + treatment_group + age + gender, data = data.surv %>% mutate(day_fct = factor(day_fct,levels = c(5,19,90))), family = binomial, id = subject_id, corstr = "independence")
model.prob.drop.coxph <- coxph(Surv(start, stop, dropped) ~ treatment_group + age + gender, data = data.surv)
tbl_regression(model.prob.drop, exponentiate = F)
tbl_regression(model.prob.drop.coxph, exponentiate = F)
tbl_merge(
list(tbl_regression(model.prob.drop, exponentiate = F),tbl_regression(model.prob.drop.coxph, exponentiate = F))
)
predict.prob.drop <- predict(model.prob.drop, newdata = data.surv, type = "response")
predict.prob.drop.coxph <- predict(model.prob.drop.coxph, newdata = data.surv, type = "survival")
data.surv$prob.stay <- 1 - predict.prob.drop
data.surv$prob.stay.coxph <- predict.prob.drop.coxph
data.comp <- left_join(data.comp, data.surv %>% dplyr::select(subject_id,day_fct,treatment_group,prob.stay, prob.stay.coxph))
data.comp <-
data.comp %>%
mutate(
prob.stay = ifelse(day_fct==0, 1, prob.stay),
prob.stay.coxph = ifelse(day_fct==0, 1, prob.stay.coxph)
)
model.ipw.1 <- geeglm(mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = subject_id, corstr = "independence", weights = 1/prob.stay)
model.ipw.2 <- geeglm(mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = subject_id,  corstr = "ar1", weights = 1/prob.stay)
model.ipw.3 <- geeglm(mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = subject_id, corstr = "exchangeable", weights = 1/prob.stay)
model.ipw.1 <- geeglm(mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = subject_id, corstr = "independence", weights = 1/prob.stay)
model.ipw.2 <- geeglm(mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = subject_id,  corstr = "ar1", weights = 1/prob.stay)
model.ipw.3 <- geeglm(mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = subject_id, corstr = "exchangeable", weights = 1/prob.stay)
tbl_merge(
list(tbl_regression(model.ipw.1), tbl_regression(model.ipw.2), tbl_regression(model.ipw.3))
)
AIC(model.ipw.1)
AIC(model.ipw.2)
AIC(model.ipw.3)
BIC(model.ipw.3)
AIC(model.ipw.1)
anova(model.ipw.1, model.ipw.2, model.ipw.3)
QIC(model.ipw.1)
View(model.ipw.1)
model.ipw.coxph.1 <- geeglm(mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = subject_id, corstr = "independence", weights = 1/prob.stay.coxph)
model.ipw.coxph.2 <- geeglm(mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = subject_id,  corstr = "ar1", weights = 1/prob.stay.coxph)
model.ipw.coxph.3 <- geeglm(mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = subject_id, corstr = "exchangeable", weights = 1/prob.stay.coxph)
tbl_merge(
list(tbl_regression(model.ipw.1), tbl_regression(model.ipw.2), tbl_regression(model.ipw.3))
)
model.ipw.coxph.1 <- geeglm(mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = subject_id, corstr = "independence", weights = 1/prob.stay.coxph)
model.ipw.coxph.2 <- geeglm(mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = subject_id,  corstr = "ar1", weights = 1/prob.stay.coxph)
model.ipw.coxph.3 <- geeglm(mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = subject_id, corstr = "exchangeable", weights = 1/prob.stay.coxph)
tbl_merge(
list(tbl_regression(model.ipw.coxph.1), tbl_regression(model.coxph.ipw.2), tbl_regression(model.coxph.ipw.3))
)
tbl_merge(
list(tbl_regression(model.ipw.coxph.1), tbl_regression(model.ipw.coxph.2), tbl_regression(model.ipw.coxph.3))
)
tbl_merge(
list(tbl_regression(model.ipw.1), tbl_regression(model.ipw.2), tbl_regression(model.ipw.3))
)
---
title: "Project2_presentation"
knitr::opts_chunk$set(echo = TRUE)
library(xaringan)
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F)
xaringan:::inf_mr()
---
title: "Project 2"
---
title: "Project 2"
View(data.comp)
data.baseline <- data.comp %>% filter(day == 0)
xaringan:::inf_mr()
servr::daemon_stop(2)
View(data.baseline)
library(table1)
label(data.baseline$age) = "Age"
label(data.baseline$gender) = "Gender"
install.packages(c("aod", "askpass", "bayesplot", "bayestestR", "BH", "biostat3", "blogdown", "bookdown", "boot", "brew", "brio", "broom.helpers", "bslib", "callr", "checkmate", "classInt", "cli", "cluster", "clv", "cobalt", "coda", "commonmark", "cowplot", "credentials", "crosstalk", "curl", "dagitty", "data.table", "datawizard", "DBI", "dbplyr", "deeplr", "desc", "DiagrammeR", "dials", "digest", "distributional", "dotwhisker", "downlit", "dplyr", "DT", "e1071", "effectsize", "emmeans", "estimability", "estimatr", "expm", "fansi", "flexdashboard", "flextable", "FNN", "fontawesome", "foreign", "fs", "future", "future.apply", "gargle", "gdtools", "gee", "geepack", "gert", "ggdag", "ggeffects", "ggforce", "ggplot2", "ggraph", "ggrepel", "ggridges", "ggsci", "ggthemes", "glmtoolbox", "globals", "glue", "gmodels", "graphlayouts", "gt", "gtExtras", "gtools", "gtsummary", "hardhat", "haven", "Hmisc", "hoardr", "htmltools", "htmlwidgets", "httpuv", "httr", "httr2", "igraph", "infer", "insight", "jagsUI", "jsonlite", "kableExtra", "KernSmooth", "kml", "knitr", "later", "lattice", "lava", "listenv", "lme4", "lmw", "longitudinalData", "loo", "lubridate", "magick", "markdown", "MASS", "Matrix", "matrixStats", "minqa", "modeldata", "nlme", "officer", "openssl", "packcircles", "paletteer", "parallelly", "parameters", "parsnip", "patchwork", "performance", "pkgbuild", "pkgload", "plotly", "plyr", "pracma", "predint", "pROC", "processx", "promises", "ps", "QuickJSR", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "reactR", "readr", "readxl", "recipes", "rematch", "remotes", "reprex", "Rfast", "rgl", "rlang", "rmarkdown", "roxygen2", "rpart", "rstan", "rstantools", "rvest", "s2", "sass", "servr", "sf", "shape", "shiny", "sjPlot", "snakecase", "sp", "spacetime", "spatial", "StanHeaders", "stringdist", "stringi", "survey", "survival", "svglite", "systemfonts", "terra", "textshaping", "tidygraph", "tidyr", "tidyselect", "timechange", "timeDate", "tinytex", "tweenr", "ucminf", "units", "usethis", "usmap", "usmapdata", "utf8", "uuid", "V8", "vctrs", "viridis", "withr", "wk", "workflows", "writexl", "xaringan", "xfun", "xgboost", "XML", "xml2", "xts", "yaml", "yardstick", "zip"))
install.packages(c("aod", "askpass", "bayesplot", "bayestestR", "BH", "biostat3", "blogdown", "bookdown", "boot", "brew", "brio", "broom.helpers", "bslib", "callr", "checkmate", "classInt", "cli", "cluster", "clv", "cobalt", "coda", "commonmark", "cowplot", "credentials", "crosstalk", "curl", "dagitty", "data.table", "datawizard", "DBI", "dbplyr", "deeplr", "desc", "DiagrammeR", "dials", "digest", "distributional", "dotwhisker", "downlit", "dplyr", "DT", "e1071", "effectsize", "emmeans", "estimability", "estimatr", "expm", "fansi", "flexdashboard", "flextable", "FNN", "fontawesome", "foreign", "fs", "future", "future.apply", "gargle", "gdtools", "gee", "geepack", "gert", "ggdag", "ggeffects", "ggforce", "ggplot2", "ggraph", "ggrepel", "ggridges", "ggsci", "ggthemes", "glmtoolbox", "globals", "glue", "gmodels", "graphlayouts", "gt", "gtExtras", "gtools", "gtsummary", "hardhat", "haven", "Hmisc", "hoardr", "htmltools", "htmlwidgets", "httpuv", "httr", "httr2", "igraph", "infer", "insight", "jagsUI", "jsonlite", "kableExtra", "KernSmooth", "kml", "knitr", "later", "lattice", "lava", "listenv", "lme4", "lmw", "longitudinalData", "loo", "lubridate", "magick", "markdown", "MASS", "Matrix", "matrixStats", "minqa", "modeldata", "nlme", "officer", "openssl", "packcircles", "paletteer", "parallelly", "parameters", "parsnip", "patchwork", "performance", "pkgbuild", "pkgload", "plotly", "plyr", "pracma", "predint", "pROC", "processx", "promises", "ps", "QuickJSR", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "reactR", "readr", "readxl", "recipes", "rematch", "remotes", "reprex", "Rfast", "rgl", "rlang", "rmarkdown", "roxygen2", "rpart", "rstan", "rstantools", "rvest", "s2", "sass", "servr", "sf", "shape", "shiny", "sjPlot", "snakecase", "sp", "spacetime", "spatial", "StanHeaders", "stringdist", "stringi", "survey", "survival", "svglite", "systemfonts", "terra", "textshaping", "tidygraph", "tidyr", "tidyselect", "timechange", "timeDate", "tinytex", "tweenr", "ucminf", "units", "usethis", "usmap", "usmapdata", "utf8", "uuid", "V8", "vctrs", "viridis", "withr", "wk", "workflows", "writexl", "xaringan", "xfun", "xgboost", "XML", "xml2", "xts", "yaml", "yardstick", "zip"))
install.packages(c("aod", "askpass", "bayesplot", "bayestestR", "BH", "biostat3", "blogdown", "bookdown", "boot", "brew", "brio", "broom.helpers", "bslib", "callr", "checkmate", "classInt", "cli", "cluster", "clv", "cobalt", "coda", "commonmark", "cowplot", "credentials", "crosstalk", "curl", "dagitty", "data.table", "datawizard", "DBI", "dbplyr", "deeplr", "desc", "DiagrammeR", "dials", "digest", "distributional", "dotwhisker", "downlit", "dplyr", "DT", "e1071", "effectsize", "emmeans", "estimability", "estimatr", "expm", "fansi", "flexdashboard", "flextable", "FNN", "fontawesome", "foreign", "fs", "future", "future.apply", "gargle", "gdtools", "gee", "geepack", "gert", "ggdag", "ggeffects", "ggforce", "ggplot2", "ggraph", "ggrepel", "ggridges", "ggsci", "ggthemes", "glmtoolbox", "globals", "glue", "gmodels", "graphlayouts", "gt", "gtExtras", "gtools", "gtsummary", "hardhat", "haven", "Hmisc", "hoardr", "htmltools", "htmlwidgets", "httpuv", "httr", "httr2", "igraph", "infer", "insight", "jagsUI", "jsonlite", "kableExtra", "KernSmooth", "kml", "knitr", "later", "lattice", "lava", "listenv", "lme4", "lmw", "longitudinalData", "loo", "lubridate", "magick", "markdown", "MASS", "Matrix", "matrixStats", "minqa", "modeldata", "nlme", "officer", "openssl", "packcircles", "paletteer", "parallelly", "parameters", "parsnip", "patchwork", "performance", "pkgbuild", "pkgload", "plotly", "plyr", "pracma", "predint", "pROC", "processx", "promises", "ps", "QuickJSR", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "reactR", "readr", "readxl", "recipes", "rematch", "remotes", "reprex", "Rfast", "rgl", "rlang", "rmarkdown", "roxygen2", "rpart", "rstan", "rstantools", "rvest", "s2", "sass", "servr", "sf", "shape", "shiny", "sjPlot", "snakecase", "sp", "spacetime", "spatial", "StanHeaders", "stringdist", "stringi", "survey", "survival", "svglite", "systemfonts", "terra", "textshaping", "tidygraph", "tidyr", "tidyselect", "timechange", "timeDate", "tinytex", "tweenr", "ucminf", "units", "usethis", "usmap", "usmapdata", "utf8", "uuid", "V8", "vctrs", "viridis", "withr", "wk", "workflows", "writexl", "xaringan", "xfun", "xgboost", "XML", "xml2", "xts", "yaml", "yardstick", "zip"))
install.packages(c("aod", "askpass", "bayesplot", "bayestestR", "BH", "biostat3", "blogdown", "bookdown", "boot", "brew", "brio", "broom.helpers", "bslib", "callr", "checkmate", "classInt", "cli", "cluster", "clv", "cobalt", "coda", "commonmark", "cowplot", "credentials", "crosstalk", "curl", "dagitty", "data.table", "datawizard", "DBI", "dbplyr", "deeplr", "desc", "DiagrammeR", "dials", "digest", "distributional", "dotwhisker", "downlit", "dplyr", "DT", "e1071", "effectsize", "emmeans", "estimability", "estimatr", "expm", "fansi", "flexdashboard", "flextable", "FNN", "fontawesome", "foreign", "fs", "future", "future.apply", "gargle", "gdtools", "gee", "geepack", "gert", "ggdag", "ggeffects", "ggforce", "ggplot2", "ggraph", "ggrepel", "ggridges", "ggsci", "ggthemes", "glmtoolbox", "globals", "glue", "gmodels", "graphlayouts", "gt", "gtExtras", "gtools", "gtsummary", "hardhat", "haven", "Hmisc", "hoardr", "htmltools", "htmlwidgets", "httpuv", "httr", "httr2", "igraph", "infer", "insight", "jagsUI", "jsonlite", "kableExtra", "KernSmooth", "kml", "knitr", "later", "lattice", "lava", "listenv", "lme4", "lmw", "longitudinalData", "loo", "lubridate", "magick", "markdown", "MASS", "Matrix", "matrixStats", "minqa", "modeldata", "nlme", "officer", "openssl", "packcircles", "paletteer", "parallelly", "parameters", "parsnip", "patchwork", "performance", "pkgbuild", "pkgload", "plotly", "plyr", "pracma", "predint", "pROC", "processx", "promises", "ps", "QuickJSR", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "reactR", "readr", "readxl", "recipes", "rematch", "remotes", "reprex", "Rfast", "rgl", "rlang", "rmarkdown", "roxygen2", "rpart", "rstan", "rstantools", "rvest", "s2", "sass", "servr", "sf", "shape", "shiny", "sjPlot", "snakecase", "sp", "spacetime", "spatial", "StanHeaders", "stringdist", "stringi", "survey", "survival", "svglite", "systemfonts", "terra", "textshaping", "tidygraph", "tidyr", "tidyselect", "timechange", "timeDate", "tinytex", "tweenr", "ucminf", "units", "usethis", "usmap", "usmapdata", "utf8", "uuid", "V8", "vctrs", "viridis", "withr", "wk", "workflows", "writexl", "xaringan", "xfun", "xgboost", "XML", "xml2", "xts", "yaml", "yardstick", "zip"))
install.packages(c("aod", "askpass", "bayesplot", "bayestestR", "BH", "biostat3", "blogdown", "bookdown", "boot", "brew", "brio", "broom.helpers", "bslib", "callr", "checkmate", "classInt", "cli", "cluster", "clv", "cobalt", "coda", "commonmark", "cowplot", "credentials", "crosstalk", "curl", "dagitty", "data.table", "datawizard", "DBI", "dbplyr", "deeplr", "desc", "DiagrammeR", "dials", "digest", "distributional", "dotwhisker", "downlit", "dplyr", "DT", "e1071", "effectsize", "emmeans", "estimability", "estimatr", "expm", "fansi", "flexdashboard", "flextable", "FNN", "fontawesome", "foreign", "fs", "future", "future.apply", "gargle", "gdtools", "gee", "geepack", "gert", "ggdag", "ggeffects", "ggforce", "ggplot2", "ggraph", "ggrepel", "ggridges", "ggsci", "ggthemes", "glmtoolbox", "globals", "glue", "gmodels", "graphlayouts", "gt", "gtExtras", "gtools", "gtsummary", "hardhat", "haven", "Hmisc", "hoardr", "htmltools", "htmlwidgets", "httpuv", "httr", "httr2", "igraph", "infer", "insight", "jagsUI", "jsonlite", "kableExtra", "KernSmooth", "kml", "knitr", "later", "lattice", "lava", "listenv", "lme4", "lmw", "longitudinalData", "loo", "lubridate", "magick", "markdown", "MASS", "Matrix", "matrixStats", "minqa", "modeldata", "nlme", "officer", "openssl", "packcircles", "paletteer", "parallelly", "parameters", "parsnip", "patchwork", "performance", "pkgbuild", "pkgload", "plotly", "plyr", "pracma", "predint", "pROC", "processx", "promises", "ps", "QuickJSR", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "reactR", "readr", "readxl", "recipes", "rematch", "remotes", "reprex", "Rfast", "rgl", "rlang", "rmarkdown", "roxygen2", "rpart", "rstan", "rstantools", "rvest", "s2", "sass", "servr", "sf", "shape", "shiny", "sjPlot", "snakecase", "sp", "spacetime", "spatial", "StanHeaders", "stringdist", "stringi", "survey", "survival", "svglite", "systemfonts", "terra", "textshaping", "tidygraph", "tidyr", "tidyselect", "timechange", "timeDate", "tinytex", "tweenr", "ucminf", "units", "usethis", "usmap", "usmapdata", "utf8", "uuid", "V8", "vctrs", "viridis", "withr", "wk", "workflows", "writexl", "xaringan", "xfun", "xgboost", "XML", "xml2", "xts", "yaml", "yardstick", "zip"))
install.packages(c("aod", "askpass", "bayesplot", "bayestestR", "BH", "biostat3", "blogdown", "bookdown", "boot", "brew", "brio", "broom.helpers", "bslib", "callr", "checkmate", "classInt", "cli", "cluster", "clv", "cobalt", "coda", "commonmark", "cowplot", "credentials", "crosstalk", "curl", "dagitty", "data.table", "datawizard", "DBI", "dbplyr", "deeplr", "desc", "DiagrammeR", "dials", "digest", "distributional", "dotwhisker", "downlit", "dplyr", "DT", "e1071", "effectsize", "emmeans", "estimability", "estimatr", "expm", "fansi", "flexdashboard", "flextable", "FNN", "fontawesome", "foreign", "fs", "future", "future.apply", "gargle", "gdtools", "gee", "geepack", "gert", "ggdag", "ggeffects", "ggforce", "ggplot2", "ggraph", "ggrepel", "ggridges", "ggsci", "ggthemes", "glmtoolbox", "globals", "glue", "gmodels", "graphlayouts", "gt", "gtExtras", "gtools", "gtsummary", "hardhat", "haven", "Hmisc", "hoardr", "htmltools", "htmlwidgets", "httpuv", "httr", "httr2", "igraph", "infer", "insight", "jagsUI", "jsonlite", "kableExtra", "KernSmooth", "kml", "knitr", "later", "lattice", "lava", "listenv", "lme4", "lmw", "longitudinalData", "loo", "lubridate", "magick", "markdown", "MASS", "Matrix", "matrixStats", "minqa", "modeldata", "nlme", "officer", "openssl", "packcircles", "paletteer", "parallelly", "parameters", "parsnip", "patchwork", "performance", "pkgbuild", "pkgload", "plotly", "plyr", "pracma", "predint", "pROC", "processx", "promises", "ps", "QuickJSR", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "reactR", "readr", "readxl", "recipes", "rematch", "remotes", "reprex", "Rfast", "rgl", "rlang", "rmarkdown", "roxygen2", "rpart", "rstan", "rstantools", "rvest", "s2", "sass", "servr", "sf", "shape", "shiny", "sjPlot", "snakecase", "sp", "spacetime", "spatial", "StanHeaders", "stringdist", "stringi", "survey", "survival", "svglite", "systemfonts", "terra", "textshaping", "tidygraph", "tidyr", "tidyselect", "timechange", "timeDate", "tinytex", "tweenr", "ucminf", "units", "usethis", "usmap", "usmapdata", "utf8", "uuid", "V8", "vctrs", "viridis", "withr", "wk", "workflows", "writexl", "xaringan", "xfun", "xgboost", "XML", "xml2", "xts", "yaml", "yardstick", "zip"))
knitr::opts_chunk$set(echo = TRUE)
label(data.baseline$treatment_group) = "Treatment"
data.baseline <- data.comp %>% filter(day == 0)
source(knitr::purl("./data_manipulation.Rmd", quiet=TRUE))
knitr::opts_chunk$set(echo = TRUE)
source(knitr::purl("./data_manipulation.Rmd", quiet=TRUE))
source(knitr::purl("./data_manipulation.Rmd", quiet=TRUE))
install.packages("ggplot2")
install.packages("ggplot2")
source(knitr::purl("./data_manipulation.Rmd", quiet=TRUE))
knitr::opts_chunk$set(echo = TRUE)
source(knitr::purl("./data_manipulation.Rmd", quiet=TRUE))
source(knitr::purl("./EDA.Rmd", quiet=TRUE))
data.baseline <- data.comp %>% filter(day == 0)
library(table1)
label(data.baseline$age) = "Age"
label(data.baseline$gender) = "Gender"
label(data.baseline$treatment_group) = "Treatment"
View(data.baseline)
label(data.baseline$mem_comp) = "Composite Memory Score"
View(data.baseline)
data.baseline$gender = ifelse(data.baseline$gender == "M", "Male", "Female")
?table1
tbl1 <- table1(treatment_group ~ gender + age + mem_comp, data=data.baseline)
data.baseline <- data.comp %>% filter(day == 0)
library(table1)
label(data.baseline$age) = "Age"
label(data.baseline$gender) = "Gender"
label(data.baseline$treatment_group) = "Treatment"
label(data.baseline$mem_comp) = "Baseline Composite Memory Score"
data.baseline$gender = ifelse(data.baseline$gender == "M", "Male", "Female")
tbl1 <- table1(treatment_group ~ gender + age + mem_comp, data=data.baseline)
data.baseline <- data.comp %>% filter(day == 0)
library(table1)
label(data.baseline$age) = "Age"
label(data.baseline$gender) = "Gender"
label(data.baseline$treatment_group) = "Treatment"
label(data.baseline$mem_comp) = "Baseline Composite Memory Score"
data.baseline$gender = ifelse(data.baseline$gender == "M", "Male", "Female")
tbl1 <- table1( ~ gender + age + mem_comp | treatment_group, data=data.baseline)
tbl1
my.render.cont <- function(x) {
with(stats.default(x),
sprintf("%0.2f (%0.1f)", MEAN, SD))
}
data.baseline <- data.comp %>% filter(day == 0)
library(table1)
label(data.baseline$age) = "Age"
label(data.baseline$gender) = "Gender"
label(data.baseline$treatment_group) = "Treatment"
label(data.baseline$mem_comp) = "Baseline Composite Memory Score"
data.baseline$gender = ifelse(data.baseline$gender == "M", "Male", "Female")
my.render.cont <- function(x) {
with(stats.default(x),
sprintf("%0.2f (%0.1f)", MEAN, SD))
}
tbl1 <- table1( ~ gender + age + mem_comp | treatment_group, data=data.baseline, render.continuous=my.render.cont)
tbl1
data.baseline <- data.comp %>% filter(day == 0)
library(table1)
data.baseline$gender = ifelse(data.baseline$gender == "M", "Male", "Female")
label(data.baseline$age) = "Age"
label(data.baseline$gender) = "Gender"
label(data.baseline$treatment_group) = "Treatment"
label(data.baseline$mem_comp) = "Baseline Composite Memory Score"
my.render.cont <- function(x) {
with(stats.default(x),
sprintf("%0.2f (%0.1f)", MEAN, SD))
}
tbl1 <- table1( ~ gender + age + mem_comp | treatment_group, data=data.baseline, render.continuous=my.render.cont)
tbl1
# centering age for better interpretation
data.full$age = data.full$age - mean(data.full$age)
data.comp$age = data.comp$age - mean(data.comp$age)
data.surv$age = data.surv$age - mean(data.surv$age)
library(gee)
library(geepack)
library(glmtoolbox)
library(gtsummary)
library(tidyverse)
data.comp.lag <-
data.comp %>%
group_by(subject_id) %>%
mutate(mem_comp_lag = lag(mem_comp), observed_lag = lag(observed)) %>%
ungroup() %>%
filter(observed_lag != 0) %>%
mutate(drop = ifelse(observed == 0 & observed_lag == 1, 1, 0)) %>%
dplyr::select(subject_id, day, day_fct, age, gender, treatment_group, mem_comp_lag, drop) %>%
mutate(day_fct = factor(day, levels = c(5,19,90)))
model.complete.1 <- geeglm(mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = subject_id, corstr = "independence")
model.complete.2 <- geeglm(mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = subject_id,  corstr = "ar1")
model.complete.3 <- geeglm(mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = subject_id, corstr = "exchangeable")
#tbl_regression(model.complete.1)
#tbl_regression(model.complete.2)
#tbl_regression(model.complete.3)
tbl_merge(
list(tbl_regression(model.complete.1), tbl_regression(model.complete.2), tbl_regression(model.complete.3))
)
model.drop <-
geeglm(drop ~ day_fct + treatment_group + age + gender + mem_comp_lag, data = data.comp.lag, family = binomial, id = subject_id, corstr = "independence")
tbl_regression(model.drop, exponentiate = F)
library(lme4)
library(nlme)
library(lattice)
library(knitr)
library(kableExtra)
model.lmer = lmer(
mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct + (1 |subject_id), data = data.comp
)
tbl_regression(model.lmer)
# propensity score models, using logistic regression and coxph model
model.prob.drop <-
geeglm(dropped ~ day_fct + treatment_group + age + gender, data = data.surv %>% mutate(day_fct = factor(day_fct,levels = c(5,19,90))), family = binomial, id = subject_id, corstr = "independence")
model.prob.drop.coxph <- coxph(Surv(start, stop, dropped) ~ treatment_group + age + gender, data = data.surv)
tbl_regression(model.prob.drop, exponentiate = F)
tbl_regression(model.prob.drop.coxph, exponentiate = F)
tbl_merge(
list(tbl_regression(model.prob.drop, exponentiate = F),tbl_regression(model.prob.drop.coxph, exponentiate = F))
)
predict.prob.drop <- predict(model.prob.drop, newdata = data.surv, type = "response")
predict.prob.drop.coxph <- predict(model.prob.drop.coxph, newdata = data.surv, type = "survival")
data.surv$prob.stay <- 1 - predict.prob.drop
data.surv$prob.stay.coxph <- predict.prob.drop.coxph
data.comp <- left_join(data.comp, data.surv %>% dplyr::select(subject_id,day_fct,treatment_group,prob.stay, prob.stay.coxph))
data.comp <-
data.comp %>%
mutate(
prob.stay = ifelse(day_fct==0, 1, prob.stay),
prob.stay.coxph = ifelse(day_fct==0, 1, prob.stay.coxph)
)
model.ipw.1 <- geeglm(mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = subject_id, corstr = "independence", weights = 1/prob.stay)
model.ipw.2 <- geeglm(mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = subject_id,  corstr = "ar1", weights = 1/prob.stay)
model.ipw.3 <- geeglm(mem_comp ~ day_fct + treatment_group + age + gender + treatment_group * day_fct, data = data.comp, family = gaussian, id = subject_id, corstr = "exchangeable", weights = 1/prob.stay)
tbl_merge(
list(tbl_regression(model.ipw.1), tbl_regression(model.ipw.2), tbl_regression(model.ipw.3))
)
install.packages("xaringan")
install.packages("xaringan")
install.packages("htmltools")
install.packages("htmltools")
